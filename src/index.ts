import {app, BrowserWindow, ipcMain, session} from 'electron'
import * as os from 'os'
import {AppServer, getExtensionPath, ViewManager} from './services'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

const isDev = process.env.NODE_ENV !== 'production'
const appServer = new AppServer()

ViewManager.registerView('main', {
  url: MAIN_WINDOW_WEBPACK_ENTRY,
  config: {
    width: 640,
    height: 480,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      webSecurity: false,
      contextIsolation: false,
    },
  },
})

appServer.startNMS()

ipcMain.handle('nms-ports', () => appServer.getPorts())
ipcMain.handle('netInterfaces', () => os.networkInterfaces())
ipcMain.handle('nms-restart', async () => {
  await appServer.stopNMS()
  await appServer.startNMS()
  return appServer.getPorts()
})

const mainWindow = () => {
  // Create the browser window.
  const mainWindow = ViewManager.openView('main')

  appServer.on('started', () => {
    mainWindow.webContents.send('nms-started')
  })

  appServer.on('stopped', () => {
    mainWindow.webContents.send('nms-stopped')
  })

  if (isDev) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools()
  }
}

const createWindow = () => {
  if (isDev) {
    // load react-dev-tools extension
    session.defaultSession.loadExtension(
      getExtensionPath('fmkadmapgofadopljbjfkapdkoienihi'),
    )
  }

  mainWindow()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
